priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #! "#!/usr/bin/env (!env)" b
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n" `
endsnippet

snippet sbash "safe bash options" b
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
`!p snip.rv ='\n\n' `
endsnippet

snippet temp "Tempfile" b
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet /case|sw(itch)?/ "case .. esac (case)" rb
case ${1:word} in
	${2:pattern} )
		${0:${VISUAL}};;
esac
endsnippet

snippet elif "elif .. (elif)" b
elif ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL}}
endsnippet

snippet for "for ... done (for)" b
for (( i = 0; i < ${1:10}; i++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet forin "for ... in ... done (forin)" b
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:${VISUAL}}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0`echo \\n`${1/['"`](.+)['"`]/$1/}
endsnippet

snippet /ift(est)?/ "if ... then (if)" rb
if ${2:[ ${1:condition} ]}; then
	${0:${VISUAL}}
fi
endsnippet

snippet if "if ... then (if)" b
if [[ ${1:condition} ]]; then
	${0:${VISUAL}}
fi
endsnippet

snippet until "until ... (done)" b
until ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet /wh(ile)?/ "while ... (done)" rb
while ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet func "function() {...}" b
${1:function} () {
	${0:${VISUAL}}
}
endsnippet

# Writing Snippets
# https://www.ejmastnak.com/tutorials/vim-latex/ultisnips/#writing-snippets
# :help UltiSnips-authoring-snippets
# :help UltiSnips-snippet-options
#
# Reload snippets
# :call UltiSnips#RefreshSnippets()

snippet colors "define color variables (https://colors.sh/)"
# From https://colors.sh
NO_FORMAT="\033[0m"
NC=$NO_FORMAT
C_AQUA="\033[38;5;14m"
C_BLUE="\033[38;5;12m"
C_GREEN="\033[38;5;2m"
C_GREY="\033[38;5;8m"
C_LIME="\033[38;5;10m"
C_ORANGE1="\033[38;5;214m"
C_PINK1="\033[38;5;218m"
C_RED="\033[38;5;9m"
C_YELLOW2="\033[38;5;190m"
C_YELLOW="\033[38;5;11m"
endsnippet

snippet echoerr "echo msg to stderr"
>&2 echo -e "${1:message}"
endsnippet

snippet info "echo INFO msg to stderr"
>&2 echo -e "${C_GREEN}INFO:${NC} ${1:message}"
endsnippet

snippet /warn(ing)?/ "echo WARNING msg to stderr" r
>&2 echo -e "${C_YELLOW}WARNING:${NC} ${1:message}"
endsnippet

snippet /err(or)?/ "echo ERROR msg to stderr" r
>&2 echo -e "${C_RED}ERROR:${NC} ${1:message}"
endsnippet

snippet /fora(rray)?/ "for ... in ARRAY (fora)" r
for ${1:i}${2/.+/ in /}"${${2:ARRAY}[@]}"; do
	${0:${VISUAL}}
done
endsnippet


snippet scriptdir "set scriptdir variable"
SCRIPT_DIR=$( cd -- "$(dirname $(realpath -- "${BASH_SOURCE[0]}"))" &> /dev/null && pwd )
endsnippet

snippet tempd "Tempdir" b
${1:TMPDIR}="$(mktemp -dt ${3:--suffix=${4:.d}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX --tmpdir=/run/user/$(id -u))"
${5:${6/(.+)/trap "/}${6:rm -rf '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -rf '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -rf '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet usage "usage function"
usage () {
   echo "Usage: $(basename \$0) [options]

Options:
  -i, --install          Install
  -u, --upgrade          Upgrade
  -f, --env-file <file>  Environment file
      --dry-run          Simulate install or upgrade
  -h, --help             Help
"
}
endsnippet

snippet getopt "getopt template"
params="$(getopt -o f:h -l file:,help --name "$0" -- "$@")"
eval set -- "$params"

while true
do
  case "\$1" in
    -f|--file)
      shift
      file=\$1
      shift
      ;;
    -h|--help)
      usage
      exit 2
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Not implemented: \$1" >&2
      exit 1
      ;;
  esac
done
endsnippet

snippet issourced "is script being sourced"
[[ "${BASH_SOURCE[0]}" != "\${0}" ]] || ${1:script_being_sourced}
endsnippet
